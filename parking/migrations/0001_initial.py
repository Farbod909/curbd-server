# Generated by Django 2.1 on 2018-08-03 06:17

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import parking.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='FixedAvailability',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_datetime', models.DateTimeField()),
                ('end_datetime', models.DateTimeField()),
                ('pricing', models.PositiveIntegerField(default=100, help_text='The cost (in U.S. cents) of parking at the space for 1 hour')),
            ],
            options={
                'verbose_name_plural': 'fixed availabilities',
            },
        ),
        migrations.CreateModel(
            name='ParkingSpace',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('latitude', models.DecimalField(decimal_places=6, max_digits=9)),
                ('longitude', models.DecimalField(decimal_places=6, max_digits=9)),
                ('available_spaces', models.PositiveIntegerField(default=1, help_text="NOTE: Each individual parking space should be positioned such that each car can arrive and leave independent of other cars currently parked at that location. If this is not possible, please enter '1' as the number of spaces available.", verbose_name='Number of spaces available')),
                ('size', models.PositiveIntegerField(choices=[(1, 'Motorcycle'), (2, 'Compact'), (3, 'Mid-sized'), (4, 'Large'), (5, 'Oversized')], help_text='This is the maximum vehicle size the parking space can support', verbose_name='Max supported automobile size')),
                ('features', parking.fields.ChoiceArrayField(base_field=models.CharField(choices=[('EV Charging', 'EV Charging'), ('Illuminated', 'Illuminated'), ('Covered', 'Covered'), ('Guarded', 'Guarded'), ('Surveillance', 'Surveillance'), ('Gated', 'Gated')], max_length=50), blank=True, help_text='A list of features e.g. EV charging, Illuminated, etc.', size=None)),
                ('name', models.CharField(help_text="e.g. '123 Robertson' or 'Sam's Diner'", max_length=50)),
                ('instructions', models.CharField(blank=True, help_text='Any instructions that will help customers find the parking spot', max_length=100)),
                ('physical_type', models.CharField(choices=[('Driveway', 'Driveway'), ('Garage', 'Garage'), ('Lot', 'Parking Lot'), ('Structure', 'Parking Structure'), ('Unpaved', 'Unpaved Lot')], max_length=50)),
                ('legal_type', models.CharField(choices=[('Residential', 'Residential'), ('Business', 'Business')], max_length=50)),
                ('is_active', models.BooleanField(default=False)),
                ('host', models.ForeignKey(help_text='The host that the parking space belongs to', on_delete=django.db.models.deletion.CASCADE, to='accounts.Host')),
            ],
        ),
        migrations.CreateModel(
            name='ParkingSpaceRating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.PositiveIntegerField(validators=[django.core.validators.MaxValueValidator(5)])),
                ('parking_space', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='parking.ParkingSpace')),
            ],
        ),
        migrations.CreateModel(
            name='RepeatingAvailability',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('repeating_days', parking.fields.ChoiceArrayField(base_field=models.CharField(choices=[('Sun', 'Sunday'), ('Mon', 'Monday'), ('Tue', 'Tuesday'), ('Wed', 'Wednesday'), ('Thu', 'Thursday'), ('Fri', 'Friday'), ('Sat', 'Saturday')], max_length=15), size=None)),
                ('pricing', models.PositiveIntegerField(default=15, help_text='The cost (in U.S. cents) of parking at the space for 5 minutes')),
                ('parking_space', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='parking.ParkingSpace')),
            ],
            options={
                'verbose_name_plural': 'repeating availabilities',
            },
        ),
        migrations.CreateModel(
            name='Reservation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_datetime', models.DateTimeField()),
                ('end_datetime', models.DateTimeField()),
                ('for_repeating', models.BooleanField(editable=False)),
                ('car', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.Car')),
                ('fixed_availability', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='parking.FixedAvailability')),
                ('repeating_availability', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='parking.RepeatingAvailability')),
            ],
        ),
        migrations.AddField(
            model_name='fixedavailability',
            name='parking_space',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='parking.ParkingSpace'),
        ),
    ]
